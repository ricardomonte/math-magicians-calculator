{"version":3,"sources":["components/Display.js","components/Button.js","components/ButtonPanel.js","logic/operate.js","logic/calculate.js","components/App.js","index.js"],"names":["Display","calculation","className","defaultProps","Button","name","onClick","classButton","includes","type","ButtonPanel","namesButtons","group1","group2","group3","group4","group5","arrKeys","Object","keys","buttons","map","key","element","groupButton","i","Operate","numberOne","numberTwo","operation","result","firstNumber","Big","secondNumber","plus","minus","times","div","toString","Calculate","data","buttonName","total","next","operator","parseInt","NaN","App","useState","state","setState","simbolOperation","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7566ad2c.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nfunction Display({ calculation }) {\n  return (\n    <div className=\"Display hpx-100\">\n      <h1>{calculation}</h1>\n    </div>\n  );\n}\n\nDisplay.defaultProps = {\n  calculation: '0',\n};\n\nDisplay.propTypes = {\n  calculation: PropTypes.string,\n};\n\nexport default Display;\n","import PropTypes from 'prop-types';\n\nfunction Button({ name, onClick }) {\n  const signsClass = ['รท', 'X', '-', '+', '='];\n  let classButton = 'btn h-100 bg-button-';\n  classButton += signsClass.includes(name) ? 'orange' : 'normal';\n  classButton += name === '0' ? ' w-50' : ' w-25';\n  return (\n    <button\n      type=\"button\"\n      onClick={() => onClick(name)}\n      className={classButton}\n    >\n      { name }\n    </button>\n  );\n}\n\nButton.propTypes = {\n  name: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n\n};\n\nexport default Button;\n","import PropTypes from 'prop-types';\nimport Button from './Button';\n\nfunction ButtonPanel({ onClick }) {\n  const namesButtons = {\n    group1: ['AC', '+/-', '%', 'รท'],\n    group2: ['7', '8', '9', 'X'],\n    group3: ['4', '5', '6', '-'],\n    group4: ['1', '2', '3', '+'],\n    group5: ['0', '.', '='],\n  };\n\n  const arrKeys = Object.keys(namesButtons);\n  const buttons = arrKeys\n    .map((key) => namesButtons[key].map((element) => (\n      <Button\n        key={element}\n        name={element}\n        onClick={onClick}\n      />\n    )));\n  return (\n    <>\n      { buttons.map((groupButton, i) => <div className=\"hpx-100\" key={arrKeys[i]}>{groupButton}</div>) }\n    </>\n  );\n}\n\nButtonPanel.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default ButtonPanel;\n","import Big from 'big.js';\n\nconst Operate = (numberOne, numberTwo, operation) => {\n  const firstNumber = Big(numberOne);\n  const secondNumber = Big(numberTwo);\n  let result;\n\n  switch (operation) {\n    case '+':\n      result = firstNumber.plus(secondNumber);\n      break;\n    case '-':\n      result = firstNumber.minus(secondNumber);\n      break;\n    case 'X':\n      result = firstNumber.times(secondNumber);\n      break;\n    case 'รท':\n      result = firstNumber.div(secondNumber);\n      break;\n    case '%':\n      result = (firstNumber.div(100)).times(secondNumber);\n      break;\n    default:\n      result = null;\n  }\n  return result.toString();\n};\n\nexport default Operate;\n","import Operate from './operate';\n\nconst Calculate = (data, buttonName) => {\n  const { total, next, operator } = data;\n  switch (buttonName) {\n    case '+/-':\n      if (total) {\n        const number = parseInt(total, 10) * -1;\n        return {\n          total: number.toString(),\n          next,\n          operator,\n        };\n      }\n      return {\n        total,\n        next: (parseInt(next, 10) * -1).toString(),\n        operator,\n      };\n\n    case 'AC':\n      return {\n        total: '',\n        next: '',\n        operator: '',\n      };\n\n    case '=':\n      if (next === '0' && buttonName === 'รท') {\n        return {\n          total: NaN,\n          next: '',\n          operator: '',\n        };\n      }\n      return {\n        total: next ? Operate(total, next, operator) : total,\n        next: '',\n        operator: '',\n      };\n\n    case '1':\n    case '2':\n    case '3':\n    case '4':\n    case '5':\n    case '6':\n    case '7':\n    case '8':\n    case '9':\n    case '0':\n      if (operator) {\n        return {\n          total,\n          next: next ? `${next}${buttonName}` : buttonName,\n          operator,\n        };\n      }\n\n      return {\n        total: total ? `${total}${buttonName}` : buttonName,\n        next,\n        operator,\n\n      };\n\n    case '.':\n      if (operator) {\n        if (next) {\n          return {\n            total,\n            next: `${next}${buttonName}`,\n            operator,\n          };\n        }\n\n        return {\n          total,\n          next: `${buttonName}`,\n          operator,\n        };\n      }\n      if (total) {\n        return {\n          total: `${total}${buttonName}`,\n          next,\n          operator,\n        };\n      }\n      return {\n        total: `${buttonName}`,\n        next,\n        operator,\n      };\n\n    default:\n      if (operator) {\n        return {\n          total: next ? Operate(total, next, operator) : NaN,\n          next: '',\n          operator: buttonName,\n        };\n      }\n  }\n  return { total, next: '', operator: buttonName };\n};\n\nexport default Calculate;\n","import React, { useState } from 'react';\nimport Display from './Display';\nimport ButtonPanel from './ButtonPanel';\nimport Calculate from '../logic/calculate';\n\nfunction App() {\n  const [state, setState] = useState({ total: null, next: null, operator: null });\n\n  const handleClick = (simbolOperation) => {\n    setState(Calculate(state, simbolOperation));\n  };\n\n  const result = () => {\n    const { total, next, operator } = state;\n    let display = '0';\n    if (next) {\n      display = total + operator + next;\n    } else if ((operator && operator !== '=') && total) {\n      display = total + operator;\n    } else {\n      display = total || '0';\n    }\n    return display;\n  };\n\n  return (\n    <div className=\"w-100 h-100 App\">\n      <Display calculation={result()} />\n      <ButtonPanel onClick={handleClick} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}